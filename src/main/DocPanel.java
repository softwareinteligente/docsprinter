package main;

import com.google.gson.JsonObject;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.io.File;
import javax.swing.ImageIcon;

public class DocPanel extends javax.swing.JPanel {

	String jsonFilepath;
	String pdfFilepath;
	String imgTemplateFilepath;
	String pdfTemplateFilepath;
	ImageIcon imageIcon;

	int imgWidth, imgHeight, pdfWidth, pdfHeight;
	DocText[] textAreas;
	public String docType;
	public String docName;
	public String docNumber;

	public DocPanel () {
		initComponents ();
	}

	public void init (String newFilepath) {
		textAreas = getDocTextAreas ();
		setUpperCaseToTextAreas ();
		setConstraintsToTextAreas ();
		setFilepath (newFilepath);

		switch (docType) {
			case "cartaporte":
				imgTemplateFilepath = DocGlobals.imgCartaporteFilepath;
				pdfTemplateFilepath = DocGlobals.pdfCartaporteFilepath;
				break;
			case "manifiesto":
				imgTemplateFilepath = DocGlobals.imgManifiestoFilepath;
				pdfTemplateFilepath = DocGlobals.pdfManifiestoFilepath;
				break;
			case "declaracion":
				imgTemplateFilepath = DocGlobals.imgDeclaracionFilepath;
				pdfTemplateFilepath = DocGlobals.pdfDeclaracionFilepath;
				break;
		}
	}

	public void setConstraintsToTextAreas () {
		System.out.println (">>> MÃ©todo 'setConstraintsToTextAreas' No implementado");
	}

	// Set the name of the doc JSON file and PDF file
	public void setFilepath (String newFilepath) {
		if (newFilepath.contains (".json")) {
			this.jsonFilepath = newFilepath;
			this.pdfFilepath = newFilepath.replace (".json", ".pdf");
		} else {
			this.jsonFilepath = newFilepath + ".json";
			this.pdfFilepath = newFilepath + ".pdf";
		}

		// Extract only the name of the file without path and extension
		String fileName = new File (jsonFilepath).getName ();
		int lastDotIndex = fileName.lastIndexOf (".");
		if (lastDotIndex > 0)
			fileName = fileName.substring (0, lastDotIndex);

		this.docName = this.docType + ":" + fileName;
	}

	// Get all DocTextAreas to set initial parameters
	public DocText[] getDocTextAreas () {
		Component[] components = getComponents ();
		DocText[] textAreas = new DocText[components.length - 1];
		for (int i = 0; i < components.length - 1; i++) {
			DocText dta = (DocText) components[i];
			textAreas[i] = dta;
		}
		return textAreas;
	}

	public void setUpperCaseToTextAreas () {
		for (DocText textArea : getDocTextAreas ()) {
			textArea.setUpperCaseFilter ();
		}
	}

	@Override
	public Dimension getPreferredSize () {
		Dimension imageSize = new Dimension (imageIcon.getIconWidth (), imageIcon.getIconHeight ());
		return imageSize;
	}

	public void cleanPanel () {
		for (DocText textArea : getDocTextAreas ()) {
			textArea.setText ("");
		}
	}
	
//
//	public void writeSingleFieldToPDF (PDPageContentStream contentStream, DocText textArea) throws IOException {
//		// Split by newlines
//		Rectangle imgBounds = textArea.getBounds ();
//		Point point = new Point (imgBounds.x, imgBounds.y);
//				
//		String text = textArea.getText ();
//		String[] lines = textArea.getText ().split (System.lineSeparator ());
//		for (String line : lines) {
//			contentStream.beginText ();
//			if (textArea.fontSizeName.equals ("large")) {
//				contentStream.setFont (PDType1Font.HELVETICA_BOLD, 16);
//				DocModel.fontLineSpacing = 25;
//			} else if (textArea.fontSizeName.equals ("small")) {
//				contentStream.setFont (PDType1Font.HELVETICA_BOLD, 6);
//				DocModel.fontLineSpacing = 6;
//			} else {
//				contentStream.setFont (PDType1Font.HELVETICA_BOLD, 6);
//				DocModel.fontLineSpacing = 9;
//			}
//
//			AffineTransform affineTransform = new AffineTransform ();
//			affineTransform.concatenate (AffineTransform.getRotateInstance (Math.PI, 0, 390)); // No translation
//			affineTransform.concatenate (AffineTransform.getScaleInstance (-1, 1)); // No translation
//			contentStream.setTextMatrix (affineTransform);
//
//			contentStream.newLineAtOffset (point.x, point.y);
//			contentStream.showText (line);
//			contentStream.endText ();
//			point.y -= DocModel.fontLineSpacing; // Adjust the vertical position for the next line
//		}
//
////		contentStream.showText (textComp.getText ());
////		contentStream.endText ();
//	}
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
